#!/usr/bin/env python3
# /// script
# requires-python = ">=3.12"
# dependencies = []
# ///
"""Generate aws-exports.js from CDK stack outputs."""

import json
import sys
from pathlib import Path
from typing import Any

# Import common utilities
from utils import (
    FRONTEND_DIR,
    exit_with_error,
    exit_with_success,
    get_stack_outputs,
    print_header,
    print_info,
    print_success,
    print_warning,
)


def generate_aws_exports_content(auth_outputs: dict[str, str], static_outputs: dict[str, str]) -> str:
    """Generate the content for aws-exports.js file."""

    # Get values from stack outputs
    user_pool_id = auth_outputs.get("UserPoolId", "")
    user_pool_client_id = auth_outputs.get("UserPoolClientId", "")
    identity_pool_id = auth_outputs.get("IdentityPoolId", "")
    user_pool_domain = auth_outputs.get("UserPoolDomainName", "")
    cloudfront_domain = static_outputs.get("DistributionDomainName", "")

    # Build redirect URLs
    redirect_urls = ["http://localhost:5173/"]
    if cloudfront_domain:
        redirect_urls.append(f"https://{cloudfront_domain}/")

    content = f"""// AWS Amplify v6 configuration for Cognito authentication
// Auto-generated by scripts/generate_aws_exports.py - DO NOT EDIT MANUALLY
const awsconfig = {{
  Auth: {{
    Cognito: {{
      userPoolId: '{user_pool_id}',
      userPoolClientId: '{user_pool_client_id}',
      identityPoolId: '{identity_pool_id}',
      loginWith: {{
        email: true,
        oauth: {{
          domain: '{user_pool_domain}.auth.ap-southeast-2.amazoncognito.com',
          scopes: ['email', 'openid', 'profile'],
          redirectSignIn: {json.dumps(redirect_urls)},
          redirectSignOut: {json.dumps(redirect_urls)},
          responseType: 'code',
          providers: ['Google'],
        }},
      }},
    }},
  }},
}}

export default awsconfig
"""

    return content


def read_existing_config(file_path: Path) -> dict[str, Any]:
    """Read existing aws-exports.js and extract configuration."""
    if not file_path.exists():
        return {}

    try:
        content = file_path.read_text()
        # Extract values using simple string parsing
        config = {}

        if "userPoolId: '" in content:
            start = content.find("userPoolId: '") + len("userPoolId: '")
            end = content.find("'", start)
            config["userPoolId"] = content[start:end]

        if "userPoolClientId: '" in content:
            start = content.find("userPoolClientId: '") + len("userPoolClientId: '")
            end = content.find("'", start)
            config["userPoolClientId"] = content[start:end]

        if "redirectSignIn: [" in content:
            start = content.find("redirectSignIn: [") + len("redirectSignIn: [")
            end = content.find("]", start)
            redirect_str = content[start:end]
            # Extract CloudFront domain if present
            if "cloudfront.net" in redirect_str:
                cf_start = redirect_str.find("https://") + len("https://")
                cf_end = redirect_str.find(".cloudfront.net") + len(".cloudfront.net")
                config["cloudfrontDomain"] = redirect_str[cf_start:cf_end]

        return config

    except Exception as e:
        print_warning(f"Could not parse existing config: {e}")
        return {}


def check_config_drift(
    existing_config: dict[str, Any], auth_outputs: dict[str, str], static_outputs: dict[str, str]
) -> bool:
    """Check if the configuration has drifted from stack outputs."""
    drifted = False

    # Check User Pool ID
    if existing_config.get("userPoolId") != auth_outputs.get("UserPoolId"):
        print_warning(f"User Pool ID drift: {existing_config.get('userPoolId')} → {auth_outputs.get('UserPoolId')}")
        drifted = True

    # Check User Pool Client ID
    if existing_config.get("userPoolClientId") != auth_outputs.get("UserPoolClientId"):
        print_warning(
            f"Client ID drift: {existing_config.get('userPoolClientId')} → {auth_outputs.get('UserPoolClientId')}"
        )
        drifted = True

    # Check CloudFront domain
    current_cf = existing_config.get("cloudfrontDomain", "").replace("https://", "").replace("/", "")
    new_cf = static_outputs.get("DistributionDomainName", "")
    if current_cf != new_cf:
        print_warning(f"CloudFront domain drift: {current_cf} → {new_cf}")
        drifted = True

    return drifted


def main():
    """Main function to generate aws-exports.js from CDK outputs."""
    print_header("AWS Exports Configuration Generator")

    # Get stack outputs
    print_info("Fetching Auth Stack outputs...")
    auth_outputs = get_stack_outputs("SfltAuthStack", "ap-southeast-2")

    if not auth_outputs:
        exit_with_error("No Auth Stack outputs found. Is the stack deployed?")

    print_info("Fetching Static Site Stack outputs...")
    static_outputs = get_stack_outputs("SfltStaticSiteStack", "us-east-1")

    if not static_outputs:
        exit_with_error("No Static Site Stack outputs found. Is the stack deployed?")

    # Validate required outputs
    required_auth_outputs = ["UserPoolId", "UserPoolClientId", "IdentityPoolId", "UserPoolDomainName"]
    missing_outputs = [key for key in required_auth_outputs if key not in auth_outputs]

    if missing_outputs:
        exit_with_error(f"Missing required Auth Stack outputs: {', '.join(missing_outputs)}")

    # Path to aws-exports.js
    aws_exports_path = FRONTEND_DIR / "src" / "aws-exports.js"

    # Check for existing config and drift
    existing_config = read_existing_config(aws_exports_path)
    if existing_config:
        print_info("Checking for configuration drift...")
        has_drift = check_config_drift(existing_config, auth_outputs, static_outputs)
        if has_drift:
            print_warning("Configuration drift detected")
        else:
            print_success("No configuration drift detected")
    else:
        has_drift = False

    # Generate new content
    print_info("Generating aws-exports.js content...")
    content = generate_aws_exports_content(auth_outputs, static_outputs)

    # Write to file
    try:
        aws_exports_path.write_text(content)
        print_success(f"Generated: {aws_exports_path}")

        # Print summary
        print_info("\nConfiguration Summary:")
        print_info(f"  User Pool ID: {auth_outputs['UserPoolId']}")
        print_info(f"  Client ID: {auth_outputs['UserPoolClientId']}")
        print_info(f"  CloudFront: https://{static_outputs.get('DistributionDomainName', 'N/A')}/")

        if has_drift:
            exit_with_success("\n✅ Configuration updated to match stack outputs")
            sys.exit(2)  # Special exit code for drift detected
        else:
            exit_with_success("\n✅ Configuration generated successfully")

    except Exception as e:
        exit_with_error(f"Failed to write aws-exports.js: {e}")


if __name__ == "__main__":
    main()
