#!/usr/bin/env python3
# /// script
# requires-python = ">=3.12"
# dependencies = [
#   "boto3",
#   "rich",
# ]
# ///
"""Generate aws-exports.js from CDK stack outputs."""

import json
import logging
import sys
from pathlib import Path
from typing import Any

import boto3

# Configure Rich logging
from rich.console import Console
from rich.logging import RichHandler

console = Console()
logging.basicConfig(
    level=logging.INFO,
    format="%(message)s",
    handlers=[RichHandler(console=console, show_path=False, show_time=False)]
)
logger = logging.getLogger(__name__)

# Constants
SCRIPT_DIR = Path(__file__).parent
PROJECT_ROOT = SCRIPT_DIR.parent
FRONTEND_DIR = PROJECT_ROOT / "frontend"


def get_stack_outputs(stack_name: str, region: str) -> dict[str, str]:
    """Get CloudFormation stack outputs."""
    try:
        cf_client = boto3.client("cloudformation", region_name=region)
        response = cf_client.describe_stacks(StackName=stack_name)

        outputs = {}
        for output in response["Stacks"][0]["Outputs"]:
            outputs[output["OutputKey"]] = output["OutputValue"]

        return outputs
    except Exception as e:
        logger.error(f"Failed to get stack outputs for {stack_name}: {e}")
        return {}


def generate_aws_exports_content(auth_outputs: dict[str, str], static_outputs: dict[str, str]) -> str:
    """Generate the content for aws-exports.js file."""

    # Get values from stack outputs
    user_pool_id = auth_outputs.get("UserPoolId", "")
    user_pool_client_id = auth_outputs.get("UserPoolClientId", "")
    identity_pool_id = auth_outputs.get("IdentityPoolId", "")
    user_pool_domain = auth_outputs.get("UserPoolDomainName", "")
    cloudfront_domain = static_outputs.get("DistributionDomainName", "")

    # Build redirect URLs
    redirect_urls = ["http://localhost:5173/"]
    if cloudfront_domain:
        redirect_urls.append(f"https://{cloudfront_domain}/")

    content = f"""// AWS Amplify v6 configuration for Cognito authentication
// Auto-generated by scripts/generate_aws_exports.py - DO NOT EDIT MANUALLY
const awsconfig = {{
  Auth: {{
    Cognito: {{
      userPoolId: '{user_pool_id}',
      userPoolClientId: '{user_pool_client_id}',
      identityPoolId: '{identity_pool_id}',
      loginWith: {{
        email: true,
        oauth: {{
          domain: '{user_pool_domain}.auth.ap-southeast-2.amazoncognito.com',
          scopes: ['email', 'openid', 'profile'],
          redirectSignIn: {json.dumps(redirect_urls)},
          redirectSignOut: {json.dumps(redirect_urls)},
          responseType: 'code',
          providers: ['Google'],
        }},
      }},
    }},
  }},
}}

export default awsconfig
"""

    return content


def read_existing_config(file_path: Path) -> dict[str, Any]:
    """Read existing aws-exports.js and extract configuration."""
    if not file_path.exists():
        return {}

    try:
        content = file_path.read_text()
        # Extract values using simple string parsing
        config = {}

        if "userPoolId: '" in content:
            start = content.find("userPoolId: '") + len("userPoolId: '")
            end = content.find("'", start)
            config["userPoolId"] = content[start:end]

        if "userPoolClientId: '" in content:
            start = content.find("userPoolClientId: '") + len("userPoolClientId: '")
            end = content.find("'", start)
            config["userPoolClientId"] = content[start:end]

        if "redirectSignIn: [" in content:
            start = content.find("redirectSignIn: [") + len("redirectSignIn: [")
            end = content.find("]", start)
            redirect_str = content[start:end]
            # Extract CloudFront domain if present
            if "cloudfront.net" in redirect_str:
                cf_start = redirect_str.find("https://") + len("https://")
                cf_end = redirect_str.find(".cloudfront.net") + len(".cloudfront.net")
                config["cloudfrontDomain"] = redirect_str[cf_start:cf_end]

        return config

    except Exception as e:
        logger.warning(f"Could not parse existing config: {e}")
        return {}


def check_config_drift(
    existing_config: dict[str, Any], auth_outputs: dict[str, str], static_outputs: dict[str, str]
) -> bool:
    """Check if the configuration has drifted from stack outputs."""
    drifted = False

    # Check User Pool ID
    if existing_config.get("userPoolId") != auth_outputs.get("UserPoolId"):
        old_id = existing_config.get('userPoolId')
        new_id = auth_outputs.get('UserPoolId')
        console.print(f"[yellow]User Pool ID drift:[/yellow] [red]{old_id}[/red] → [green]{new_id}[/green]")
        drifted = True

    # Check User Pool Client ID
    if existing_config.get("userPoolClientId") != auth_outputs.get("UserPoolClientId"):
        old_client = existing_config.get('userPoolClientId')
        new_client = auth_outputs.get('UserPoolClientId')
        console.print(
            f"[yellow]Client ID drift:[/yellow] [red]{old_client}[/red] → [green]{new_client}[/green]"
        )
        drifted = True

    # Check CloudFront domain
    current_cf = existing_config.get("cloudfrontDomain", "").replace("https://", "").replace("/", "")
    new_cf = static_outputs.get("DistributionDomainName", "")
    if current_cf != new_cf:
        console.print(f"[yellow]CloudFront domain drift:[/yellow] [red]{current_cf}[/red] → [green]{new_cf}[/green]")
        drifted = True

    return drifted


def main():
    """Main function to generate aws-exports.js from CDK outputs."""
    console.rule("[bold magenta]AWS Exports Configuration Generator[/bold magenta]")

    # Get stack outputs
    console.print("\n[dim]Fetching Auth Stack outputs...[/dim]")
    auth_outputs = get_stack_outputs("SfltAuthStack", "ap-southeast-2")

    if not auth_outputs:
        console.print("[red]✗[/red] No Auth Stack outputs found. Is the stack deployed?")
        return 1

    console.print("[dim]Fetching Static Site Stack outputs...[/dim]")
    static_outputs = get_stack_outputs("SfltStaticSiteStack", "us-east-1")

    if not static_outputs:
        console.print("[red]✗[/red] No Static Site Stack outputs found. Is the stack deployed?")
        return 1

    # Validate required outputs
    required_auth_outputs = ["UserPoolId", "UserPoolClientId", "IdentityPoolId", "UserPoolDomainName"]
    missing_outputs = [key for key in required_auth_outputs if key not in auth_outputs]

    if missing_outputs:
        missing_str = ', '.join(missing_outputs)
        console.print(f"[red]✗[/red] Missing required Auth Stack outputs: [yellow]{missing_str}[/yellow]")
        return 1

    # Path to aws-exports.js
    aws_exports_path = FRONTEND_DIR / "src" / "aws-exports.js"

    # Check for existing config and drift
    existing_config = read_existing_config(aws_exports_path)
    if existing_config:
        console.print("\n[dim]Checking for configuration drift...[/dim]")
        has_drift = check_config_drift(existing_config, auth_outputs, static_outputs)
        if has_drift:
            console.print("[yellow]Configuration drift detected[/yellow]")
        else:
            console.print("[green]✓[/green] No configuration drift detected")
    else:
        has_drift = False

    # Generate new content
    console.print("\n[dim]Generating aws-exports.js content...[/dim]")
    content = generate_aws_exports_content(auth_outputs, static_outputs)

    # Write to file
    try:
        aws_exports_path.write_text(content)
        console.print(f"[green]✓[/green] Generated: [cyan]{aws_exports_path}[/cyan]")

        # Print summary
        console.print("\n[bold]Configuration Summary:[/bold]")
        console.print(f"  [cyan]User Pool ID:[/cyan] [yellow]{auth_outputs['UserPoolId']}[/yellow]")
        console.print(f"  [cyan]Client ID:[/cyan] [yellow]{auth_outputs['UserPoolClientId']}[/yellow]")
        cf_domain = static_outputs.get('DistributionDomainName', 'N/A')
        console.print(f"  [cyan]CloudFront:[/cyan] [link]https://{cf_domain}/[/link]")

        if has_drift:
            console.print("\n[green]✅[/green] Configuration updated to match stack outputs")
            return 2  # Special exit code for drift detected
        else:
            console.print("\n[green]✅[/green] Configuration generated successfully")
            return 0

    except Exception as e:
        console.print(f"[red]✗[/red] Failed to write aws-exports.js: [red]{e}[/red]")
        return 1


if __name__ == "__main__":
    sys.exit(main())
